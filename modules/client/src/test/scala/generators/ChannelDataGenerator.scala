/*
                           /!\ HUMANS BEWARE /!\
=================================================================================
||                                                                             ||
|| THIS FILE IS GENERATED BY MACHINES AND ANY EDITING BY HUMANS IS PROHIBITED! ||
||                                                                             ||
=================================================================================
 */

package lepus.codecs

import lepus.protocol.classes.*
import lepus.protocol.domains.*
import lepus.protocol.constants.*
import ArbitraryDomains.given
import org.scalacheck.Gen
import org.scalacheck.Arbitrary

object ChannelDataGenerator {

  val openGen: Gen[ChannelClass.Open.type] =
    Gen.const(ChannelClass.Open)

  given Arbitrary[ChannelClass.Open.type] = Arbitrary(openGen)

  val openOkGen: Gen[ChannelClass.OpenOk.type] =
    Gen.const(ChannelClass.OpenOk)

  given Arbitrary[ChannelClass.OpenOk.type] = Arbitrary(openOkGen)

  val flowGen: Gen[ChannelClass.Flow] =
    for {
      arg0 <- Arbitrary.arbitrary[Boolean]
    } yield ChannelClass.Flow(arg0)

  given Arbitrary[ChannelClass.Flow] = Arbitrary(flowGen)

  val flowOkGen: Gen[ChannelClass.FlowOk] =
    for {
      arg0 <- Arbitrary.arbitrary[Boolean]
    } yield ChannelClass.FlowOk(arg0)

  given Arbitrary[ChannelClass.FlowOk] = Arbitrary(flowOkGen)

  val closeGen: Gen[ChannelClass.Close] =
    for {
      arg0 <- Arbitrary.arbitrary[ReplyCode]
      arg1 <- Arbitrary.arbitrary[ReplyText]
      arg2 <- Arbitrary.arbitrary[ClassId]
      arg3 <- Arbitrary.arbitrary[MethodId]
    } yield ChannelClass.Close(arg0, arg1, arg2, arg3)

  given Arbitrary[ChannelClass.Close] = Arbitrary(closeGen)

  val closeOkGen: Gen[ChannelClass.CloseOk.type] =
    Gen.const(ChannelClass.CloseOk)

  given Arbitrary[ChannelClass.CloseOk.type] = Arbitrary(closeOkGen)

  val classGen: Gen[ChannelClass] =
    Gen.oneOf(openGen, openOkGen, flowGen, flowOkGen, closeGen, closeOkGen)

  given Arbitrary[ChannelClass] = Arbitrary(classGen)

}
