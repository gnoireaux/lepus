/*
                           /!\ HUMANS BEWARE /!\
=================================================================================
||                                                                             ||
|| THIS FILE IS GENERATED BY MACHINES AND ANY EDITING BY HUMANS IS PROHIBITED! ||
||                                                                             ||
=================================================================================
 */

package lepus.client.codecs

import lepus.protocol.Method
import lepus.protocol.domains.ClassId
import lepus.protocol.classes.*
import lepus.client.codecs.DomainCodecs.classId
import scodec.Codec
import scodec.codecs.discriminated

object MethodCodec {

  val all: Codec[Method] = discriminated[Method]
    .by(classId)
    .subcaseP[ConnectionClass](ClassId(10)) { case m: ConnectionClass => m }(
      ConnectionCodecs.all
    )
    .subcaseP[ChannelClass](ClassId(20)) { case m: ChannelClass => m }(
      ChannelCodecs.all
    )
    .subcaseP[ExchangeClass](ClassId(40)) { case m: ExchangeClass => m }(
      ExchangeCodecs.all
    )
    .subcaseP[QueueClass](ClassId(50)) { case m: QueueClass => m }(
      QueueCodecs.all
    )
    .subcaseP[BasicClass](ClassId(60)) { case m: BasicClass => m }(
      BasicCodecs.all
    )
    .subcaseP[TxClass](ClassId(90)) { case m: TxClass => m }(TxCodecs.all)
    .subcaseP[ConfirmClass](ClassId(85)) { case m: ConfirmClass => m }(
      ConfirmCodecs.all
    )
    .withContext("Method codecs")

}
