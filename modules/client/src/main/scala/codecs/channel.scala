/*
                           /!\ HUMANS BEWARE /!\
=================================================================================
||                                                                             ||
|| THIS FILE IS GENERATED BY MACHINES AND ANY EDITING BY HUMANS IS PROHIBITED! ||
||                                                                             ||
=================================================================================
 */

package lepus.client.codecs

import lepus.protocol.*
import lepus.protocol.domains.*
import lepus.protocol.classes.*
import lepus.protocol.classes.ChannelClass.*
import lepus.protocol.constants.*
import lepus.client.codecs.DomainCodecs.*
import scodec.{Codec, Encoder, Decoder}
import scodec.codecs.*

object ChannelCodecs {

  private val openCodec: Codec[Open.type] =
    (emptyShortString) ~> provide(Open)
      .withContext("open method")

  private val openOkCodec: Codec[OpenOk.type] =
    (emptyLongString) ~> provide(OpenOk)
      .withContext("openOk method")

  private val flowCodec: Codec[Flow] =
    (bool)
      .as[Flow]
      .withContext("flow method")

  private val flowOkCodec: Codec[FlowOk] =
    (bool)
      .as[FlowOk]
      .withContext("flowOk method")

  private val closeCodec: Codec[Close] =
    (replyCode :: replyText :: classId :: methodId)
      .as[Close]
      .withContext("close method")

  private val closeOkCodec: Codec[CloseOk.type] =
    provide(CloseOk)
      .withContext("closeOk method")

  val all: Codec[ChannelClass] =
    discriminated[ChannelClass]
      .by(methodId)
      .typecase(MethodId(10), openCodec)
      .typecase(MethodId(11), openOkCodec)
      .typecase(MethodId(20), flowCodec)
      .typecase(MethodId(21), flowOkCodec)
      .typecase(MethodId(40), closeCodec)
      .typecase(MethodId(41), closeOkCodec)
      .withContext("channel methods")

}
