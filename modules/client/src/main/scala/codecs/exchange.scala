/*
                           /!\ HUMANS BEWARE /!\
=================================================================================
||                                                                             ||
|| THIS FILE IS GENERATED BY MACHINES AND ANY EDITING BY HUMANS IS PROHIBITED! ||
||                                                                             ||
=================================================================================
 */

package lepus.client.codecs

import lepus.protocol.*
import lepus.protocol.domains.*
import lepus.protocol.classes.*
import lepus.protocol.classes.ExchangeClass.*
import lepus.protocol.constants.*
import lepus.client.codecs.DomainCodecs.*
import scodec.{Codec, Encoder, Decoder}
import scodec.codecs.*

object ExchangeCodecs {

  private val declareCodec: Codec[Declare] =
    (exchangeName :: shortString :: bool(8) :: bool(8) :: bool(8) :: bool(
      8
    ) :: noWait :: fieldTable)
      .as[Declare]
      .withContext("declare method")

  private val declareOkCodec: Codec[DeclareOk.type] =
    provide(DeclareOk)
      .withContext("declareOk method")

  private val deleteCodec: Codec[Delete] =
    (exchangeName :: bool(8) :: noWait)
      .as[Delete]
      .withContext("delete method")

  private val deleteOkCodec: Codec[DeleteOk.type] =
    provide(DeleteOk)
      .withContext("deleteOk method")

  private val bindCodec: Codec[Bind] =
    (exchangeName :: exchangeName :: shortString :: noWait :: fieldTable)
      .as[Bind]
      .withContext("bind method")

  private val bindOkCodec: Codec[BindOk.type] =
    provide(BindOk)
      .withContext("bindOk method")

  private val unbindCodec: Codec[Unbind] =
    (exchangeName :: exchangeName :: shortString :: noWait :: fieldTable)
      .as[Unbind]
      .withContext("unbind method")

  private val unbindOkCodec: Codec[UnbindOk.type] =
    provide(UnbindOk)
      .withContext("unbindOk method")

  val all: Codec[ExchangeClass] =
    discriminated[ExchangeClass]
      .by(methodId)
      .typecase(MethodId(10), declareCodec)
      .typecase(MethodId(11), declareOkCodec)
      .typecase(MethodId(20), deleteCodec)
      .typecase(MethodId(21), deleteOkCodec)
      .typecase(MethodId(30), bindCodec)
      .typecase(MethodId(31), bindOkCodec)
      .typecase(MethodId(40), unbindCodec)
      .typecase(MethodId(51), unbindOkCodec)
      .withContext("exchange methods")

}
