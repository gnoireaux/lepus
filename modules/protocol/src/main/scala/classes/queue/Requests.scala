/*
                           /!\ HUMANS BEWARE /!\
=================================================================================
||                                                                             ||
|| THIS FILE IS GENERATED BY MACHINES AND ANY EDITING BY HUMANS IS PROHIBITED! ||
||                                                                             ||
=================================================================================
 */

package lepus.protocol.classes.queue

import lepus.protocol.Method
import lepus.protocol.domains.*
import lepus.protocol.constants.*

enum Requests(classId: ClassId, methodId: MethodId)
    extends Method(classId, methodId) {

  case Declare(
      queue: QueueName,
      passive: Boolean,
      durable: Boolean,
      exclusive: Boolean,
      autoDelete: Boolean,
      noWait: NoWait,
      arguments: FieldTable
  ) extends Requests(ClassId(50), MethodId(10))

  case Bind(
      queue: QueueName,
      exchange: ExchangeName,
      routingKey: ShortString,
      noWait: NoWait,
      arguments: FieldTable
  ) extends Requests(ClassId(50), MethodId(20))

  case Unbind(
      queue: QueueName,
      exchange: ExchangeName,
      routingKey: ShortString,
      arguments: FieldTable
  ) extends Requests(ClassId(50), MethodId(50))

  case Purge(queue: QueueName, noWait: NoWait)
      extends Requests(ClassId(50), MethodId(30))

  case Delete(
      queue: QueueName,
      ifUnused: Boolean,
      ifEmpty: Boolean,
      noWait: NoWait
  ) extends Requests(ClassId(50), MethodId(40))

}
