package lepus.protocol.gen

import fs2.Stream
import fs2.io.file.writeAll
import fs2.text.utf8
import cats.effect.*
import fs2.io.file.Files
import fs2.io.file.Path
import cats.implicits.*
import scala.xml.NodeSeq
import fs2.Pipe
import scala.xml.*

val genWarn: String = """
/*
                           /!\ HUMANS BEWARE /!\
=================================================================================
||                                                                             ||
|| THIS FILE IS GENERATED BY MACHINES AND ANY EDITING BY HUMANS IS PROHIBITED! ||
||                                                                             ||
=================================================================================
*/
"""
def generate(module: String, out: Path): Pipe[IO, String, Nothing] = lines =>
  (Stream(genWarn) ++ lines)
    .intersperse("\n")
    .through(utf8.encode)
    .through(
      Files[IO].writeAll(Path(s"modules/${module}/src/main/scala") / out)
    )

val namePattern = "\\W*\\b(\\w)".r
def idName(str: String): String =
  namePattern.replaceAllIn(str, m => m.group(1).toUpperCase)
def valName(str: String): String = {
  val id = idName(str)
  id.headOption.map(_.toLower).map(id.tail.prepended).getOrElse(id)
}

def comment(str: String): String = s"/**\n$str\n */"

def gen: IO[Unit] = for {
  protocol <- IO(XML.load("amqp0-9-1.extended.xml"))
  classes = buildClassModels(protocol)
  generation = MethodCodecs.generateAll(classes)
  //genClasses(protocol)
  //genConsts(    protocol  ) genDomains(protocol) merge genClasses(protocol)
  _ <- generation.compile.drain
} yield ()

object Generator extends IOApp {
  def run(args: List[String]): IO[ExitCode] = gen.as(ExitCode.Success)
}
